use crate::ast::*;
use crate::ast::decl::*;
use crate::ast::expr::*;

grammar;

// 约束 lexer 的行为
match {
  // 跳过空白符和注释
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {}, // Skip `// comments`
  r"/\*([^*]|\*[^/])*\*/" => {},  // Skip `/* comments */`
  // 剩下的情况采用默认方式处理
  _
}

// 定义 CompUnit, 其返回值类型为 String
pub CompUnit: CompUnit = {
  <comp_unit_items: (CompUnitItem)*> => CompUnit { items: comp_unit_items },
}

CompUnitItem: CompUnitItem = {
  <decl: Decl> => CompUnitItem::Decl(decl),
  <func_def: FuncDef> => CompUnitItem::FuncDef(func_def),
}

// --------------- DECL START ----------------

Decl: Decl = {
  <const_decl: ConstDecl> => Decl::ConstDecl(const_decl),
  <var_decl: VarDecl> => Decl::VarDecl(var_decl),
}

ConstDecl: ConstDecl = {
  "const" "int" <const_def: ConstDef> <mut const_defs:("," <ConstDef>)*> ";" => {
    const_defs.insert(0, const_def);
    ConstDecl { b_type: BType::Int, const_defs: const_defs}
  }
};

ConstDef: ConstDef = {
  <ident: Ident> "=" <const_init_val: ConstInitVal> => {
    ConstDef { ident, const_init_val }
  }
};

ConstInitVal: ConstInitVal = {
  <const_exp: ConstExp> => ConstInitVal { const_exp }
};

ConstExp: ConstExp = <exp: Exp> => ConstExp { exp };

VarDecl: VarDecl = {
  "int" <var_def: VarDef> <mut var_defs:("," <VarDef>)*> ";" => {
    var_defs.insert(0, var_def);
    let b_type = BType::Int;
    VarDecl { b_type, var_defs }
  }
};

VarDef: VarDef = {
  <ident: Ident> => VarDef::IdentDefine(ident),
  <ident: Ident> "=" <init_val: InitVal> => VarDef::IdentInitVal(ident, init_val),
};

InitVal: InitVal = <exp: Exp> => InitVal { exp };

// ---------------- DECL END ----------------

FuncDef: FuncDef = {
  <head: FuncHead>  ")" <block: Block> => 
    FuncDef { func_type: head.0, ident: head.1, func_f_params: Vec::new(), block: block },
  <head: FuncHead> <param: FuncFParam> <mut func_f_params: ("," <FuncFParam>)*> ")" <block: Block> => {
    func_f_params.insert(0, param);
    FuncDef { func_type: head.0, ident: head.1, func_f_params: func_f_params, block: block }
  },
}

FuncHead: (FuncType, String) = {
  "void" <ident: Ident> "(" => (FuncType::Void, ident),
  "int" <ident: Ident> "(" => (FuncType::Int, ident),
}

/*
采用这种写法的话，

栈中有
"int" Ident 

此时就需要判断继续shift还是直接把 "int" reduce成 FuncType::Int，但是应该参考下一个元素来判断是否
应该reduce成 FuncType::Int。

改成正常版本之后，LR(1) parser不需要立马做出reduce的决定，可以继续shift，等到下一个元素的时候再
判断reduce成哪一个。


FuncHead: (FuncType, String) = {
  <func_type: FuncType> <ident: Ident> "(" => (func_type, ident),
}
*/

FuncType: FuncType = {
  "int" => FuncType::Int,
  "void" => FuncType::Void,
};

FuncFParam: FuncFParam = {
  "int" <ident: Ident> => {
    let b_type = BType::Int;
    FuncFParam { b_type, ident }
  }
};

Block: Block = "{" <block_items: BlockItem*> "}" => Block { <> };

BlockItem: BlockItem = {
  <decl: Decl> => BlockItem::Decl(decl),
  <stmt: Stmt> => BlockItem::Stmt(stmt),
};


// -------------- STMT START ----------------

Stmt: Stmt = {
  <UnmatchedIfStmt> => <>,
  <MatchedStmt> => <>,
}

UnmatchedIfStmt: Stmt = {
  "if" "(" <exp: Exp> ")" <stmt: Stmt> => 
    Stmt::IfElseStmt ( IfCond{exp: exp}, ThenStmt{stmt: Box::new(stmt)}, None ),

  
  "if" "(" <exp: Exp> ")" <stmt: MatchedStmt> "else" <stmt2: UnmatchedIfStmt> => 
    Stmt::IfElseStmt ( IfCond{exp: exp}, ThenStmt{stmt: Box::new(stmt)}, Some(ElseStmt{stmt: Box::new(stmt2)}) ),

  "while" "(" <exp: Exp> ")" <stmt: UnmatchedIfStmt> => Stmt::WhileStmt ( WhileCond{0: exp}, WhileBody{0: Box::new(stmt)} ),
}

MatchedStmt: Stmt = {
  <l_val: LVal> "=" <exp: Exp> ";" => Stmt::AssignStmt ( <> ),
  <exp: Exp?> ";" => Stmt::ExpStmt ( <> ),
  <block: Block> => Stmt::BlockStmt ( <> ),
  "return" <exp: Exp> ";" => Stmt::ReturnExp ( <> ),
  "break" ";" => Stmt::BreakStmt,
  "continue" ";" => Stmt::ContinueStmt,

  "while" "(" <exp: Exp> ")" <stmt: MatchedStmt> => Stmt::WhileStmt ( WhileCond{0: exp}, WhileBody{0: Box::new(stmt)} ),

  "if" "(" <exp: Exp> ")" <stmt1: MatchedStmt> "else" <stmt2: MatchedStmt> => 
    Stmt::IfElseStmt ( IfCond{exp: exp}, ThenStmt{stmt: Box::new(stmt1)}, Some(ElseStmt{stmt: Box::new(stmt2)}) ),
}

// --------------- STMT END ----------------

// --------------- EXP ----------------
Exp: Box<Exp> = <l_or_exp: LOrExp> => Box::new(Exp{<>});

LOrExp: Box<LOrExp> = {
  <l_and_exp: LAndExp> => Box::new(LOrExp::LAndExp(<>)),
  <l_or_exp: LOrExp> "||" <l_and_exp: LAndExp> => {
    Box::new(LOrExp::LOrExpOpLAndExp(<>))
  }
}

LAndExp: Box<LAndExp> = {
  <eq_exp: EqExp> => Box::new(LAndExp::EqExp(<>)),
  <l_and_exp: LAndExp> "&&" <eq_exp: EqExp> => {
    Box::new(LAndExp::LAndExpOpEqExp(<>))
  }
}

EqExp: Box<EqExp> = {
  <rel_exp: RelExp> => Box::new(EqExp::RelExp(<>)),
  <eq_exp: EqExp> <op: EqExpOp> <rel_exp: RelExp> => {
    Box::new(EqExp::EqExpOpRelExp(<>))
  }
}

EqExpOp: EqExpOp = {
  "==" => EqExpOp::Eq,
  "!=" => EqExpOp::Ne,
}

RelExp: Box<RelExp> = {
  <add_exp: AddExp> => Box::new(RelExp::AddExp(<>)),
  <rel_exp: RelExp> <op: RelExpOp> <add_exp: AddExp> => {
    Box::new(RelExp::RelExpOpAddExp(<>))
  }
}

RelExpOp: RelExpOp = {
  "<" => RelExpOp::Lt,
  ">" => RelExpOp::Gt,
  "<=" => RelExpOp::Le,
  ">=" => RelExpOp::Ge,
}

AddExp: Box<AddExp> = {
  <mul_exp: MulExp> => Box::new(AddExp::MulExp(<>)),
  <add_exp: AddExp> <op: AddOp> <mul_exp: MulExp> => {
    Box::new(AddExp::AddExpOpMulExp(<>))
  }
}

MulExp: Box<MulExp> = {
  <unary_exp: UnaryExp> => Box::new(MulExp::UnaryExp(<>)),
  <mul_exp: MulExp> <op: MulOp> <unary_exp: UnaryExp> => {
    Box::new(MulExp::MulExpOpUnaryExp(<>))
  }
}

UnaryExp: Box<UnaryExp> = {
  <primary_exp: PrimaryExp> => Box::new(UnaryExp::PrimaryExp(<>)),
  <unary_op: UnaryOp> <unary_exp: UnaryExp> => {
    Box::new(UnaryExp::UnaryOpAndExp(<>))
  },
  <func_call: FuncCall> => Box::new(UnaryExp::FuncCall(<>)),
}

FuncCall: Box<FuncCall> = {
  <ident: Ident> "(" ")" => Box::new(FuncCall{ident, args: Vec::new()}),
  <ident: Ident> "(" <arg: Exp> <mut args: ("," <Exp>)*> ")" => {
    args.insert(0, arg);
    Box::new(FuncCall{ident, args})
  }
}

PrimaryExp: Box<PrimaryExp> = {
  "(" <exp: Exp> ")" => Box::new(PrimaryExp::Exp(<>)),
  <number: Number> => Box::new(PrimaryExp::Number(<>)),
  <l_val: LVal> => Box::new(PrimaryExp::LVal(<>)),
}

LVal: LVal = <ident: Ident> => LVal { <> };

AddOp: AddOp = {
  "+" => AddOp::Plus,
  "-" => AddOp::Minus,
}

MulOp: MulOp = {
  "*" => MulOp::Mul,
  "/" => MulOp::Div,
  "%" => MulOp::Mod,
}

UnaryOp: UnaryOp = {
  "+" => UnaryOp::Plus,
  "-" => UnaryOp::Minus,
  "!" => UnaryOp::Not,
}

// 如果匹配到标识符, 就返回这个字符串
// 一对尖括号在此处指代的是正则表达式匹配到的字符串 (&str)
// 关于尖括号到底代表什么, 请 RTFM
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

Number: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}